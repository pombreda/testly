#!/usr/bin/env python

import json
from subprocess import Popen, PIPE
import difflib

# Define ASCII escape characters for special symbols and text colouring
tick = '\xE2\x9C\x94'
cross = '\xE2\x9C\x97'
pass_colour = '\033[92m'
fail_colour = '\033[91m'
end_colour = '\033[0m'

# Open the JSON file
try:
    file_ = open('tests.json').read()
except IOError:
    print 'No file named tests.json in the current directory'
    exit(1)

# Parse the file contents into a Python dictionary
try:
    json_ = json.loads(file_)
except ValueError:
    print 'tests.json does not contain a valid JSON object'
    exit(2)

try:
    filename = json_['filename']
    tests = json_['tests']
except KeyError as e:
    print 'tests.json is missing the %s property' % e
    exit(3)

i = 1
num_tests = len(tests)

for test in tests:
    before = [test['before']] if 'before' in test else []
    after = [test['after']] if 'after' in test else []
    cases = test['cases']

    j = 1
    num_cases = len(cases)
    print 'Test %d:' % i

    for case in cases:
        line_separator = case['line_separator'] if 'line_separator' in case else '\n'

        input_ = '\n'.join(case['input'])
        expected_output = line_separator.join(before + case['output'] + after)

        # Spawn a subprocess by running the executable to be tested
        try:
            process = Popen([filename], stdin=PIPE, stdout=PIPE)
        except OSError:
            print 'No file with the name "%s" found in the current directory' % filename
            exit(4)

        # Send this test case's input to the process
        output, error = process.communicate(input=input_)

        didPass = output == expected_output
        colour = pass_colour if didPass else fail_colour
        symbol = tick if didPass else cross
        word = 'passed' if didPass else 'failed'

        # Print the results of this test case
        print '%sCase %d of %d %s %s%s' % (colour, j, num_cases, word, symbol, end_colour)
        print 'The program should %s.' % case['it_should']

        # Print the diff of the actual output and the expected output if they do not match
        if not didPass:
            differ = difflib.Differ()
            diff = difflib.ndiff(output.splitlines(), expected_output.splitlines())
            print '\n'.join(diff)

        j += 1

    i += 1
    print ' '
